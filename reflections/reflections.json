{
	"reflections": [
		{
			"name": "to-stop-is-suggestion",
			"content": "<span>\r\n    <p>\r\n        As a great procrastinator\/dreamer I find this advice to be particularly useful.\r\n    <\/p>\r\n    <p>\r\n        <b>\r\n            When brain asks to resign or stop - it is merely <i>suggestion<\/i>.\r\n        <\/b> \r\n    <\/p>\r\n    <p>\r\n        I am able to answer both yes or no to the suggestion. With quality of neuroplasticity brain will be what I tell\/want it to be.\r\n    <\/p>\r\n    <p>\r\n        How this applies to neural networks? Do they have such parts which can control other parts? Do they have capacity to modify itself?\r\n    <\/p>\r\n<\/span>",
			"date": "2/1/2023"
		},
		{
			"name": "naming-is-matter",
			"content": "<span>\r\n    <p>Consider code block, can you spot an error in a second given its full\r\n    with additional business logic details?<\/p>\r\n\r\n    <code>\r\n        \/* somewhere far away (written in small letters)<br>\r\n            &nbsp; ValidatedBrewIntervals.Add(RecipeBook.Default.BeanTypeId); <br>\r\n        *\/ <br><br>\r\n        class CoffeeRecipe <br>\r\n        { <br>\r\n            &nbsp; int BeanTypeId { get; set; } <br>\r\n            &nbsp; int BrewIntervalId { get; set; } <br>\r\n        } <br> <br>\r\n        ISet&lt;int&gt; ValidatedBrewIntervals = new HashSet&lt;int&gt;(); <br> <br>\r\n        void ValidateReceipes(IEnumerable<CoffeeRecipe> recipes) {<br>\r\n            &nbsp; foreach(var recipe in recipes) { <br>\r\n                &nbsp; &nbsp; if(!<b>ValidatedBrewIntervals<\/b>.Contains(recipe.<b>BrewIntervalId<\/b>)) { <br>\r\n                    &nbsp; &nbsp; &nbsp; <b>ValidatedBrewIntervals<\/b>.Add(recipe.<b>BrewIntervalId<\/b>); <br>\r\n                &nbsp; &nbsp; } <br>\r\n            &nbsp; } <br>\r\n        }\r\n    <\/code><br><br>\r\n\r\n    <p>I couldn't and spend too much time figuring out trivial bug.\r\n    What if I would get this block to work with instead.<\/p>\r\n\r\n    <code>\r\n        ISet&lt;int&gt; ValidatedBeanTypes = new HashSet&lt;int&gt;(); <br> <br>\r\n        void ValidateReceipes(IEnumerable<CoffeeRecipe> recipes) {<br>\r\n            &nbsp; foreach(var recipe in recipes) { <br>\r\n                &nbsp; &nbsp; if(!<b>ValidatedBeanTypes<\/b>.Contains(recipe.<b>BrewIntervalId<\/b>)) { <br>\r\n                    &nbsp; &nbsp; &nbsp; <b>ValidatedBeanTypes<\/b>.Add(recipe.<b>BrewIntervalId<\/b>); <br>\r\n                &nbsp; &nbsp; } <br>\r\n            &nbsp; } <br>\r\n        }\r\n    <\/code><br><br>\r\n\r\n    <p>Much easier to spot.<\/p>\r\n\r\n    <p><b>Naming is matter.<\/b><\/p>\r\n    <p>Name things as best (closest to reality) as you can as soon as you can.<\/p>\r\n\r\n<\/span>",
			"date": "1/30/2023"
		},
		{
			"name": "klein-bottle",
			"content": "some klein bottle content is here",
			"date": "2/2/002"
		}
	]
}